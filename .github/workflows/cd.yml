name: CD - Deploy to VPS

on:
  push:
    branches: [main]
    paths:
      - 'pipelines/**'
      - 'Dockerfile'
      - 'requirements.txt'
      - 'docker-compose.yml'
      - '.github/workflows/ci.yml'
      - '.github/workflows/cd.yml'
  workflow_run:
    workflows: ["CI - Build and Push to ACR"]
    types:
      - completed

env:
  IMAGE_NAME: prefect-worker

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Only run if CI workflow succeeded or if directly triggered by push
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1.0.3
        env:
          ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
          ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
          ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
          IMAGE_TAG: ${{ github.ref_name }}-${{ github.sha }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          envs: ACR_LOGIN_SERVER,ACR_USERNAME,ACR_PASSWORD,IMAGE_TAG,IMAGE_NAME
          script: |
            set -e

            echo "üöÄ Starting deployment..."

            # Create project directory if it doesn't exist
            mkdir -p ~/prefect
            cd ~/prefect

            echo "üìÅ Working directory: $(pwd)"

            # Log in to Azure Container Registry
            echo "üîê Logging in to ACR..."
            echo "$ACR_PASSWORD" | docker login "$ACR_LOGIN_SERVER" -u "$ACR_USERNAME" --password-stdin

            # Pull latest images
            echo "üì¶ Pulling latest images..."
            docker pull "${ACR_LOGIN_SERVER}/${IMAGE_NAME}:latest"

            # Update docker-compose to use ACR image
            echo "üìù Updating docker-compose.yml..."
            cat > docker-compose.prod.yml <<EOF
            services:
              postgres:
                image: postgres:16-alpine
                container_name: prefect-postgres
                environment:
                  POSTGRES_USER: prefect
                  POSTGRES_PASSWORD: prefect
                  POSTGRES_DB: prefect
                volumes:
                  - postgres_data:/var/lib/postgresql/data
                healthcheck:
                  test: ["CMD-SHELL", "pg_isready -U prefect"]
                  interval: 10s
                  timeout: 5s
                  retries: 5
                networks:
                  - prefect-network
                restart: unless-stopped

              prefect-server:
                image: prefecthq/prefect:3-python3.11
                container_name: prefect-server
                command: prefect server start --host 0.0.0.0
                environment:
                  PREFECT_API_DATABASE_CONNECTION_URL: postgresql+asyncpg://prefect:prefect@postgres:5432/prefect
                  PREFECT_SERVER_API_HOST: 0.0.0.0
                  PREFECT_SERVER_API_PORT: 4200
                  PREFECT_UI_API_URL: http://localhost:4200/api
                ports:
                  - "4200:4200"
                depends_on:
                  postgres:
                    condition: service_healthy
                healthcheck:
                  test: ["CMD-SHELL", "python -c 'import urllib.request; urllib.request.urlopen(\"http://localhost:4200/api/health\")'"]
                  interval: 30s
                  timeout: 10s
                  retries: 5
                  start_period: 20s
                networks:
                  - prefect-network
                restart: unless-stopped

              prefect-worker:
                image: ${ACR_LOGIN_SERVER}/${IMAGE_NAME}:latest
                container_name: prefect-worker
                environment:
                  PREFECT_API_URL: http://prefect-server:4200/api
                depends_on:
                  prefect-server:
                    condition: service_healthy
                restart: unless-stopped
                networks:
                  - prefect-network

            volumes:
              postgres_data:

            networks:
              prefect-network:
                driver: bridge
            EOF

            # Detect docker compose command (v1 or v2)
            if command -v docker-compose &> /dev/null; then
              COMPOSE_CMD="docker-compose"
            else
              COMPOSE_CMD="docker compose"
            fi
            echo "Using compose command: $COMPOSE_CMD"

            # Stop and remove old containers (force cleanup if needed)
            echo "üõë Stopping old containers..."
            $COMPOSE_CMD -f docker-compose.prod.yml down || true

            # Force remove any remaining containers with the same names
            docker rm -f prefect-postgres prefect-server prefect-worker 2>/dev/null || true

            # Start new containers
            echo "‚ñ∂Ô∏è  Starting new containers..."
            $COMPOSE_CMD -f docker-compose.prod.yml up -d

            # Wait for services to be healthy
            echo "‚è≥ Waiting for services to be healthy..."
            sleep 30

            # Check container status
            echo "üìä Container status:"
            $COMPOSE_CMD -f docker-compose.prod.yml ps

            # Show logs
            echo "üìã Recent logs:"
            $COMPOSE_CMD -f docker-compose.prod.yml logs --tail=50 prefect-worker

            # Cleanup old images
            echo "üßπ Cleaning up old images..."
            docker image prune -af --filter "until=72h" || true

            echo "‚úÖ Deployment completed successfully!"

      - name: Health Check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd ~/prefect

            # Detect docker compose command
            if command -v docker-compose &> /dev/null; then
              COMPOSE_CMD="docker-compose"
            else
              COMPOSE_CMD="docker compose"
            fi

            # Wait a bit more for services to fully start
            echo "‚è≥ Waiting for services to stabilize..."
            sleep 10

            # Check if all containers are running
            echo "üìä Checking container status..."
            $COMPOSE_CMD -f docker-compose.prod.yml ps

            if $COMPOSE_CMD -f docker-compose.prod.yml ps | grep -q "Up"; then
              echo "‚úÖ Containers are running"
            else
              echo "‚ùå Some containers are not running"
              $COMPOSE_CMD -f docker-compose.prod.yml logs --tail=100
              exit 1
            fi

            # Check Prefect API health (with retries)
            echo "üè• Checking Prefect API health..."
            max_retries=5
            retry_count=0
            while [ $retry_count -lt $max_retries ]; do
              if curl -f -s http://localhost:4200/api/health > /dev/null; then
                echo "‚úÖ Prefect API is healthy"
                exit 0
              else
                retry_count=$((retry_count + 1))
                echo "‚è≥ Attempt $retry_count/$max_retries: API not ready yet, waiting..."
                sleep 10
              fi
            done

            echo "‚ùå Prefect API health check failed after $max_retries attempts"
            $COMPOSE_CMD -f docker-compose.prod.yml logs prefect-server --tail=100
            exit 1

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Deployment to VPS succeeded!"
          else
            echo "‚ùå Deployment to VPS failed!"
          fi
