name: CD - Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:  # Permet d√©clenchement manuel depuis l'UI GitHub

env:
  REGISTRY: ${{ secrets.ACR_LOGIN_SERVER }}
  IMAGE_NAME: prefect-pipelines

jobs:
  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    environment: production  # Protection avec reviewers (optionnel)

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to VPS
        env:
          VPS_USER: ${{ secrets.VPS_USER }}
          VPS_HOST: ${{ secrets.VPS_HOST }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          ssh $VPS_USER@$VPS_HOST << 'ENDSSH'
            set -e

            echo "üöÄ Starting deployment..."

            # Navigation vers le r√©pertoire du projet
            cd /home/prefect/prefect-production/youtube-snowflake-pipeline || cd ~/prefect-production/youtube-snowflake-pipeline

            # Pull derni√®res modifications Git
            echo "üì• Pulling latest code..."
            git pull origin main

            # Login au Azure Container Registry
            echo "üîê Logging in to Azure ACR..."
            echo "${{ secrets.ACR_PASSWORD }}" | docker login ${{ secrets.ACR_LOGIN_SERVER }} -u ${{ secrets.ACR_USERNAME }} --password-stdin

            # Pull nouvelle image
            echo "üì¶ Pulling new Docker image..."
            docker pull ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest

            # Tag comme latest (pour docker-compose)
            echo "üè∑Ô∏è  Tagging as latest..."
            docker tag ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest prefect-pipelines:latest

            # Backup database (PostgreSQL)
            echo "üíæ Backing up database..."
            /usr/local/bin/docker-compose exec -T postgres pg_dump -U prefect prefect > backup_$(date +%Y%m%d_%H%M%S).sql || echo "‚ö†Ô∏è  Backup failed, continuing..."

            # Restart worker uniquement (zero-downtime deployment)
            echo "üîÑ Restarting worker..."
            /usr/local/bin/docker-compose up -d --no-deps --force-recreate prefect-worker

            # Attendre que le worker soit pr√™t
            echo "‚è≥ Waiting for worker to be ready..."
            sleep 15

            # Redeploy flows Prefect
            echo "üì§ Deploying Prefect flows..."
            /usr/local/bin/docker-compose exec -T prefect-worker python /app/pipelines/youtube/deploy.py || echo "‚ö†Ô∏è  YouTube deployment failed"
            /usr/local/bin/docker-compose exec -T prefect-worker python /app/pipelines/github/deploy.py || echo "‚ö†Ô∏è  GitHub deployment failed"
            /usr/local/bin/docker-compose exec -T prefect-worker python /app/pipelines/test/deploy.py || echo "‚ö†Ô∏è  Test deployment failed"

            # Health check
            echo "üè• Running health checks..."
            /usr/local/bin/docker-compose ps

            # V√©rifier que le worker est op√©rationnel
            /usr/local/bin/docker-compose exec -T prefect-worker prefect worker status || echo "‚ö†Ô∏è  Worker status check failed"

            # Cleanup old images (garder seulement les 5 derni√®res)
            echo "üßπ Cleaning up old images..."
            docker images | grep "${{ env.IMAGE_NAME }}" | tail -n +6 | awk '{print $3}' | xargs -r docker rmi || true

            echo "‚úÖ Deployment completed successfully!"
          ENDSSH

      - name: Health Check
        run: |
          echo "üîç Running external health check..."
          sleep 5
          curl -f http://${{ secrets.VPS_HOST }}:4200/api/health || echo "‚ö†Ô∏è  Health check failed"

      - name: Notify on success
        if: success()
        run: |
          echo "## ‚úÖ Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed to:** ${{ secrets.VPS_HOST }}" >> $GITHUB_STEP_SUMMARY

      - name: Notify on failure
        if: failure()
        run: |
          echo "## ‚ùå Deployment Failed!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "Check the logs above for details." >> $GITHUB_STEP_SUMMARY

      - name: Send Slack notification (optional)
        if: always()
        continue-on-error: true
        uses: slackapi/slack-github-action@v1
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK }}
          payload: |
            {
              "text": "${{ job.status == 'success' && '‚úÖ' || '‚ùå' }} Deployment ${{ job.status }} - ${{ github.repository }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Deployment Status:* ${{ job.status }}\n*Repository:* ${{ github.repository }}\n*Commit:* ${{ github.sha }}\n*Author:* ${{ github.actor }}"
                  }
                }
              ]
            }
